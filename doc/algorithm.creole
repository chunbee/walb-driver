= WalB Algorithm

Goals of WalB algorithm:
* make performance overhead small.
* keep consistency as a block device.

== IO processing

There are two IO processing algorithms: //easy// and //fast//.

See {{{iocore_make_request}}} function defined in {{{module/io.c}}}
to know the algorithm in detail.

The important limitation of the algorithm is that
it must not submit write IOs to the data device before they are persistent on the log device.
Since walb devices do not have undo logs, it can execute redo but cannot execute undo!

=== Easy algorithm

It is very simple algorithm.

* Write IOs:
** (1) generate logpacks and write them to the log device
** (2) write to the data device
** (3) notify IO completion
* Read IOs:
** (1) Just forward IOs to the data device.

Easy algorithm was developed just for test and benchmark.
I **strongly** recommend to use fast algorithm instead.
Especially, do not use easy algorithm on a block device
where flush requests will take much time (like raw HDD).

=== Fast algorithm

* Write IOs:
** (1) generate logpacks and write them to the log device
** (2) insert to the pending data
** (3) notify IO completion
** (4) (sort and) write to the data device
** (5) delete from the pending data
* Read IOs:
** (1) copy data from the pending data if the overlapped blocks exist.
** (2) forward IOs to the data device for remaining blocks.

The choice of fast or easy is determined at module building.

=== Pending data

Pending data is on-memory data structure, which contains write IOs data
that have been written to the log device and have not been written to the data device.

In order to satisfy //read-after-write// property,
read IOs will use data in the pending data preferentially.

Pending data consists a simple tree-based key-value structure.
To reduce performance overhead due to sorting
when there are a number of pending overlapped IOs,
fully overwritten IOs will be deleted from the structure soon.
See {{{module/pending_io.{c,h}}}} for details.

== Overlapped IO serialization

To keep //write-after-write// consistency,
you can use the functionality called overlapped IO serialization.
It will serialize overlapped IOs that have been written to the log device but
have not been written to the data device.
It achieves serializability for write IOs.

I have developed an algorithm to serialize overlapped IOs using
simple tree-based key-value structure with FIFO limitation.
See {{{module/overlapped_io.{c,h}}}} for details.

The choice of this feature on/off is determined at module building.

I **strongly** recommend to enable overlapped IO serialization feature.
Even with SSDs, the overhead of the feature is negligible.

You can choose fast/easy and overlapped serialization on/off independently,
which are named as //easy//, //fast//, //easy-ol//, //fast-ol//.
I recommend //fast-ol//.

== IO sorting

Submitted order of all write IOs will be kept as a result.
Since overlapped IO serialization feature **serializes** all write IOs.
That is, when an write IO becomes persistent,
all IOs submitted before the IO must have been persistent.
Ordinal block devices does not have this property
because IO scheduler breaks the order.

With the fast algorithm, write IOs for the data device can be sorted by address
for better performance, with no effect to the response
because the IO has been //completed// at that time.
This feature will be useful for data devices that consist of
HDDs or raid devices with HDDs.

== Checkpointing and redo

Each walb device manages {{{written_lsid}}}, which means all logpacks
of which lsid is less than {{{written_lsid}}} have been persistent on the data device and
redo operation is never required for them.

At starting time, a walb device executes //redo// the logs
of which lsid is greater than or equals to the {{{written_lsid}}},
to keep consistency.
//Redo// means to generate and execute write IOs to the data device.

{{{written_lsid}}} is always managed in the main-memory, and
made persistent by superblock sync periodically in order to reduce logs
to be redone at next starting time after sudden shutdown.

See {{{module/checkpoint.{c,h}}}} and {{{module/redo.{c,h}}}} for details.

-----
