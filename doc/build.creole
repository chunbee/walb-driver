= Build and Install WalB

== Requirements

=== Target system

* Architecture: x86_64
** Currently x86_32 is not supported.
* Linux kernel version: see README.


=== Build tools

* Tools required to build Linux kernel.

== Build kernel module

Prepare a build environment.
* Get Linux kernel source or header and install it.
** For Ubuntu, ex. {{{apt-get install linux-headers-3.2.0-40-generic}}}.

Build the module.
{{{
> cd walb.git/module
> make
}}}

You will get {{{walb-mod.ko}}} file.
Specify {{{KERNELDIR}}} option directly to specify kernel version.
For Ubuntu, ex.
{{{
> make KERNELDIR=/usr/src/linux-headers-3.2.0-40-generic
}}}

You can specify the following make options:
* {{{DEBUG=1}}}: debug build. ASSERT() will be enabled (a wrapper of BUG_ON()).
* {{{DYNAMIC_DEBUG=1}}}: use pr_debug() instead of printk() for debug logs.
* {{{OVERLAP=0}}}: disable overlapped IO serialization for test.
* {{{ASSERT=1}}}: enable ASSERT() even with release build with {{{DEBUG=0}}}.
* {{{PERF=1}}}: just for test and debug.
* {{{TRACK=1}}}: just for test and debug.

== Build userland tools

The userland tools in tool/ directory are obsolute.
Use walb-tools written by c++.
https://github.com/starpos/walb-tools/

Build the control tool.
{{{
> cd walb.git/tool
> make
}}}

You will get {{{walbctl}}} executable file.
Specify {{{DEBUG=1}}} for debug build.

Run tests:
{{{
> cd walb.git/tool
> make test
}}}
You must build them with {{{DEBUG=1}}} before running tests.

== Test and prototype tools

* {{{module/test/*}}}: test code for kernel components.
  Please use at your own risk.

== Install

Replace {{{KERNELDIR}}} to your kernel source/header directory.
You can specify any existing kernel version directly like {{{3.2.0}}} instead of {{{`uname -r`}}}.

Install the module.
{{{
> mkdir -p /lib/module/`uname -r`/kernel/drivers/block/walb
> cp -p walb.git/module/walb-mod.ko /lib/module/`uname -r`/kernel/drivers/block/walb/
> depmod `uname -r`
}}}

-----
